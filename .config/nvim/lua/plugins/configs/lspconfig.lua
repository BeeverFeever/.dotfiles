-- local present, lspconfig = pcall(require, "lspconfig")
-- if not present then
--   return
-- end

-- local present, mason_lspconfig = pcall(require, "mason-lspconfig")
-- if not present then
--   return
-- end

-- local present, navic = pcall(require, "nvim-navic")
-- if not present then
--   return
-- end

-- local capabilities = vim.lsp.protocol.make_client_capabilities()
-- capabilities = require('cmp_nvim_lsp').update_capabilities(capabilities)

-- capabilities.textDocument.completion.completionItem = {
--   documentationFormat = { "markdown", "plaintext" },
--   snippetSupport = true,
--   preselectSupport = true,
--   insertReplaceSupport = true,
--   labelDetailsSupport = true,
--   deprecatedSupport = true,
--   commitCharactersSupport = true,
--   tagSupport = { valueSet = { 1 } },
--   resolveSupport = {
--     properties = {
--       "documentation",
--       "detail",
--       "additionalTextEdits",
--     },
--   },
-- }

-- -- automatically setup the installed servers
-- local ready_servers = mason_lspconfig.get_installed_servers()
-- for _, server in ipairs(ready_servers) do
--     lspconfig[server].setup {
--         capabilities = capabilities,
--         on_attach = function(client, bufnr)
--             navic.attach(client, bufnr)
--         end,
--     }
-- end

-- -- you can do any custom setups after that for loop
-- lspconfig.sumneko_lua.setup {
--     capabilities = capabilities,
--     settings = {
--         Lua = {
--             diagnostics = {
--                 globals = { "vim" },
--             },
--             workspace = {
--                 library = {
--                     [vim.fn.expand "$VIMRUNTIME/lua"] = true,
--                     [vim.fn.expand "$VIMRUNTIME/lua/vim/lsp"] = true,
--                 },
--                 maxPreload = 100000,
--                 preloadFileSize = 10000,
--             },
--             telemetry = {
--                 enable = false,
--             },
--         },
--     },
-- }
